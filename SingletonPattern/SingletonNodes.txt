Singleton Pattern:

The Singleton pattern is a design pattern that restricts the instantiation of a class
to a single instance and provides a global point of access to that instance. In simpler
terms, it ensures that a class has only one instance and provides a way to access that
instance from any point in the application.


Creation:
1.Constructor private
2.Object create using method
3.Create fields to store object is private

Eager Loading of Creating:
In the "eager loading" approach, the singleton instance is created at the time
the class is loaded or the first time it is referenced. While this can simplify
the implementation, it has some potential drawbacks, especially in scenarios where
the singleton instance might not be needed or if it involves resource-intensive operations.

Lazing Loading:
In a multithreaded environment, lazy loading without proper synchronization mechanisms can
lead to race conditions. If multiple threads simultaneously check whether the instance is
null and then proceed to create it, you might end up with multiple instances of the
Singleton. To address this, you can use synchronization mechanisms like double-checked
locking or other thread-safe initialization methods.

Preventation from Breakage:
1.Enum
2.Throw exception in Constructor
